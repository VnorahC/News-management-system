<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        ">

	<!-- 配置包扫描位置 -->
	<context:component-scan base-package="cn.yq.oa" />

	<!-- 读取 db.properties数据库配置文件 -->
	<context:property-placeholder
		location="classpath:db.properties" />

	<!-- 配置 druid 连接池 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
	</bean>


	<!-- 配置SqlSessionFactory对象的创建 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">

		<!-- 注入插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							<!-- 方言 -->
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
		<property name="dataSource" ref="dataSource" />

		<!-- 配置映射文件 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:cn/yq/oa/mapper/*Mapper.xml</value>
			</array>
		</property>

		<!-- 配置别名，使用包扫描配置 -->
		<property name="typeAliasesPackage" value="cn.yq.oa.pojo" />

		<!-- 读取mybatis-config.xml文件（使用个性化配置，日志，缓存等等） -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
	</bean>


	<!-- 使用包扫描的方式创包下面所有接口对应的代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置包扫描创建代理对象的位置 -->
		<property name="basePackage" value="cn.yq.oa.mapper" />

		<!-- 注意： 需要注入SqlSessionFactory工厂对象的名称 ！！！ -->
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>


	<!-- MyBatis的事务配置 -->


	<!-- 配置事务管理器 ： what？ -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Spring事务配置 ： when? -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- dql操作，一般都是只读事务 -->
			<tx:method name="get*" read-only="true"
				propagation="REQUIRED" />
			<tx:method name="find*" read-only="true"
				propagation="REQUIRED" />
			<tx:method name="select*" read-only="true"
				propagation="REQUIRED" />
			<tx:method name="query*" read-only="true"
				propagation="REQUIRED" />
			<!-- dml操作，非只读事务 -->
			<tx:method name="*" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP切面，将事务切到Service层 -->
	<aop:config>
		<!-- 切入点 ：where？ -->
		<aop:pointcut
			expression="execution(* cn.yq.oa.service.impl.*.*(..))" id="pt" />
		<!-- 切面：切入点+通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt" />
	</aop:config>

</beans>